version: '3.8'

services:
  # Ollama service for local LLM inference
  ollama:
    image: ollama/ollama:latest
    container_name: kaggle-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - kaggle-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "ollama serve & sleep 5 && ollama pull gpt-oss && tail -f /dev/null"
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  # Main Kaggle Multi-Agent Application
  kaggle-agent:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kaggle-agent-app
    depends_on:
      ollama:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8000:8000"  # For potential API/web interface
    volumes:
      - ./data:/app/data
      - ./models:/app/models
      - ./submissions:/app/submissions
      - ./logs:/app/logs
      - ./src:/app/src  # Mount source for development
      - ~/.kaggle:/root/.kaggle:ro  # Kaggle credentials (read-only)
    env_file:
      - .env
    environment:
      - OLLAMA_HOST=http://ollama:11434
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - PYTHONUNBUFFERED=1
    networks:
      - kaggle-network
    restart: unless-stopped
    stdin_open: true  # For interactive mode
    tty: true
    command: python src/main.py
    deploy:
      resources:
        limits:
          memory: 16G
        reservations:
          memory: 8G

  # Redis for caching and agent state management
  redis:
    image: redis:7-alpine
    container_name: kaggle-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - kaggle-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    restart: unless-stopped

  # PostgreSQL for storing agent results, history, and metadata (optional)
  postgres:
    image: postgres:15-alpine
    container_name: kaggle-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init.sql  # Optional init script
    environment:
      - POSTGRES_DB=kaggle_agents
      - POSTGRES_USER=kaggle
      - POSTGRES_PASSWORD=kaggle_password  # Change in production!
    networks:
      - kaggle-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kaggle"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Jupyter Notebook for experimentation and visualization
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kaggle-jupyter
    depends_on:
      - redis
      - postgres
    ports:
      - "8888:8888"
    volumes:
      - ./notebooks:/app/notebooks
      - ./data:/app/data
      - ./models:/app/models
      - ./src:/app/src
    env_file:
      - .env
    environment:
      - JUPYTER_ENABLE_LAB=yes
      - OLLAMA_HOST=http://ollama:11434
      - REDIS_HOST=redis
    networks:
      - kaggle-network
    command: >
      jupyter lab
      --ip=0.0.0.0
      --port=8888
      --no-browser
      --allow-root
      --NotebookApp.token=''
      --NotebookApp.password=''
    restart: unless-stopped

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kaggle-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    networks:
      - kaggle-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    restart: unless-stopped
    profiles:
      - monitoring  # Only start with: docker-compose --profile monitoring up

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: kaggle-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin  # Change in production!
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - kaggle-network
    restart: unless-stopped
    profiles:
      - monitoring  # Only start with: docker-compose --profile monitoring up

networks:
  kaggle-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  ollama-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local